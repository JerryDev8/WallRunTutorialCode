//Made my Jerry Tutorials Enjoy ;)
//Keep in mind you do not have to credit me and I really do not want you to do just read the code and watch the video and learn the logic behind this!
//WallRun//
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
public class WallRun : MonoBehaviour
{
    [Header("Bools")]
    public bool isWallLeft;
    public bool isWallRight;
    public bool isWallRunning;

    [Header("Particle")]
    public GameObject Particle1;
    public GameObject Particle2;
    public GameObject Particle3;
    public GameObject Particle4;

    [Header("Strings")]
    public string WallRunTag;

    [Header("Other")]
    public PlayerMove PM;
    public GameObject Orientation;
    public Rigidbody rb;
    public Camera Cam;
    public RaycastHit leftwallhit;
    public RaycastHit rightwallhit;

    [Header("Floats")]
    public float WallRunSpeed;
    public float wallRunJumpForce;
    public float WallRunTime;
    public float camTiltTime;
    public float CamTilt;
    public float NormalCameraTilt;
    public float FOVtime;
    public float WallRunFOV;
    public float NormalFOV;
    [Header("Ints")]
    public int RayCastPower;
    [Header("Vectors")]
    public Vector3 WallRunForwardForce;
    public Vector3 SlowPlayerDownAfterTime;
    public Vector3 ForceWhenFallingAfterTime;
    public Vector3 ConstantUpForce;
    public Vector3 downForceWhenGoingBackWards;


    public float tilt { get; private set; }
    // Start is called before the first frame update
    void Start()
    {
        
    }
    private void OnCollisionExit(Collision collision)
    {
        PM.moveSpeed = 15;
        StopWallRun();
        StopCoroutine(StopWallRunAfterTime());
    }
    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.tag == WallRunTag)
        {
            StartCoroutine(StopWallRunAfterTime());
            StartWallRun();
        }
        if(collision.gameObject.tag == WallRunTag && isWallRunning)
        {
            PM.moveSpeed = WallRunSpeed;
            Particle1.SetActive(true);
            Particle2.SetActive(true);
            Particle3.SetActive(true);
            Particle4.SetActive(true);
        }
    }
    private void StartWallRun()
    {
        if (isWallLeft)
            tilt = Mathf.Lerp(tilt, -CamTilt, camTiltTime * Time.deltaTime);
        else if (isWallRight)
            tilt = Mathf.Lerp(tilt, CamTilt, camTiltTime * Time.deltaTime);


        Cam.fieldOfView = Mathf.Lerp(Cam.fieldOfView, WallRunFOV, FOVtime * Time.deltaTime);

        isWallRunning = true;
        StartCoroutine(StopWallRunAfterTime());
        if (Input.GetKeyDown(KeyCode.Space))
        {
            if (isWallLeft)
            {
                Vector3 wallRunJumpDirectiom = transform.up + leftwallhit.normal;
                rb.velocity = new Vector3(rb.velocity.x, 0, rb.velocity.z);
                rb.AddForce(wallRunJumpDirectiom * wallRunJumpForce * 100, ForceMode.Force);
            }
            if (isWallRight)
            {
                Vector3 wallRunJumpDirectiom = transform.up + rightwallhit.normal;
                rb.velocity = new Vector3(rb.velocity.x, 0, rb.velocity.z);
                rb.AddForce(wallRunJumpDirectiom * wallRunJumpForce * 100, ForceMode.Force);
            }
        }
    }

    private void StopWallRun()
    {
        Cam.fieldOfView = Mathf.Lerp(Cam.fieldOfView, NormalFOV, FOVtime * Time.deltaTime);
        tilt = Mathf.Lerp(tilt, 0, camTiltTime * Time.deltaTime);
        isWallRight = false;
        isWallLeft = false;
        isWallRunning = false;
        StopCoroutine(StopWallRunAfterTime());
    }
    private void CheckWall()
    {
        isWallRight = (Physics.Raycast(Orientation.transform.position, Orientation.transform.right, out rightwallhit, RayCastPower));
        isWallLeft = (Physics.Raycast(Orientation.transform.position, -Orientation.transform.right, out rightwallhit, RayCastPower));
    }
    // Update is called once per frame
    void Update()
    {
        if (Input.GetKeyDown(KeyCode.S) && isWallRunning)
        {
            rb.AddForce(downForceWhenGoingBackWards);
        }
        if (!isWallLeft && !isWallRight && !isWallRunning)
        {
            StopWallRun();
        }
        CheckWall();
        if (isWallRunning)
        {
            if (isWallLeft)
            {
                StartWallRun();
                Debug.Log("WallRunning on the left");
                rb.AddForce(ConstantUpForce);
            }
            if (isWallRight)
            {
                StartWallRun();
                Debug.Log("WallRunning on the right");
                rb.AddForce(ConstantUpForce);
            }
        }
    }
    IEnumerator StopWallRunAfterTime()
    {
        rb.AddForce(WallRunForwardForce);
        yield return new WaitForSeconds(WallRunTime);
        Particle1.SetActive(false);
        Particle2.SetActive(false);
        Particle3.SetActive(false);
        Particle4.SetActive(false);
        //rb.AddForce(WallRunForwardForce);
        rb.AddForce(SlowPlayerDownAfterTime);
        rb.AddForce(ForceWhenFallingAfterTime);
    }
}
